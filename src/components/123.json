"








<div class="modal fade" id="addFormModal" tabindex="-1" role="dialog" data-backdrop="false" aria-labelledby="myModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
                <h4 class="modal-title" id="myModalLabel">新增</h4>
            </div>
            <div class="modal-body" id="formModalBody">
                <form id="addModalForm" class="form-horizontal" role="form">
                    <div class="form-group" style="display: none;">
                        <label class="col-lg-5 control-label" for="id">主键id：</label>
                        <div class="col-lg-4">
                            <input type="text" id="id" name="id" class="form-control"/>
                        </div>
                    </div>
                    <div class="form-group radioBox">
                        <label class="col-lg-3 control-label">
                            <input type="radio" name="myoption" class="ace" value="1" checked/>
                            <span class="lbl">新增至已有的字典列表</span>
                        </label>
                        <label class="col-lg-2 control-label" for="dictList">字典描述：</label>
                        <div class="col-lg-4">
                            <select class="form-control select2" id="dictList" name="dictList">
                                <option value="">请选择</option>
                                
                                    <option value='USER_STATUS'>用户状态</option>
                                
                                    <option value='RESOURCE_TYPE'>资源类型</option>
                                
                                    <option value='DEPARTMENT_STATUS'>部门状态</option>
                                
                                    <option value='PERSON_STATUS'>人员状态</option>
                                
                                    <option value='GROUP_TYPE'>群组类型</option>
                                
                                    <option value='GROUP_STATUS'>群组状态</option>
                                
                                    <option value='PHONE_SWITCH'>电话开关</option>
                                
                                    <option value='SMS_SWITCH'>短信开关</option>
                                
                                    <option value='EMAIL_SWITCH'>邮箱开关</option>
                                
                                    <option value='APP_STATUS'>应用状态</option>
                                
                                    <option value='NODE_STATUS'>节点状态</option>
                                
                                    <option value='CHANNEL_TYPE'>渠道类型</option>
                                
                                    <option value='ALARM_LEVEL'>告警等级</option>
                                
                                    <option value='MONITOR_TYPE'>监视器类型</option>
                                
                                    <option value='TIMER_STATUS'>定时状态</option>
                                
                                    <option value='MONITOR_STATUS'>监视器状态</option>
                                
                                    <option value='ALARM_SWITCH'>告警开关</option>
                                
                                    <option value='ALARM_DEAL_STATUS'>告警处理状态</option>
                                
                                    <option value='SEND_STATUS'>发送状态</option>
                                
                                    <option value='MONITOR_DATATYPE'>监控数据类型</option>
                                
                                    <option value='THRESHOLD_OPERATION'>告警阈值操作符</option>
                                
                                    <option value='chenjunyitest'>测试</option>
                                
                                    <option value='ENDPOINT_TYPE'>埋点方式</option>
                                
                                    <option value='ALARM_SOURCE'>告警来源</option>
                                
                                    <option value='DRIVER_TYPE'>驱动类型</option>
                                
                                    <option value='ALARM_ZABBIX_TRIGGER_STATUS'>告警触发器状态</option>
                                
                                    <option value='LOG_MONITOR_STATUS'>接口监视器状态</option>
                                
                                    <option value='LOG_ALARM_SWITCH'>接口告警开关</option>
                                
                                    <option value='NODE_CENTER'>机房</option>
                                
                                    <option value='LOG_IFS_MONITOR_TYPE'>日志接口监视器类型</option>
                                
                                    <option value='AGGREGATE_COUNTER'>秒级统计类型</option>
                                
                                    <option value='AGGREGATE_GAUGE'>秒级统计类型</option>
                                
                                    <option value='AGGREGATE_METER'>秒级统计类型</option>
                                
                                    <option value='AGGREGATE_HISTOGRAM'>秒级统计类型</option>
                                
                                    <option value='AGGREGATE_TIMER'>秒级统计类型</option>
                                
                                    <option value='INTERFACE_PROTOCOL'>接口协议</option>
                                
                                    <option value='INTERFACE_STATUS'>接口状态</option>
                                
                                    <option value='DASHBOARD_STATUS'>可配置大屏状态</option>
                                
                                    <option value='STAT_TIME_RANGE'>大屏统计范围</option>
                                
                                    <option value='Y_AXIS_START_VALUE'>纵坐标起始值</option>
                                
                                    <option value='DATA_PROVIDER'>数据来源</option>
                                
                                    <option value='CALLBACK_TYPE'>回调类型</option>
                                
                                    <option value='COMPARIAN_SYMBOL'>比较符</option>
                                
                                    <option value='LOGIC_SYMBOL'>逻辑符</option>
                                
                                    <option value='TEST'>符号测试</option>
                                
                                    <option value='ALARM_NOTIFY_STASTUS'>告警是否有效</option>
                                
                                    <option value='CONVERGENCE_TIME'>告警收敛时间</option>
                                
                                    <option value='AGGREGATE_UNIT'>聚合粒度</option>
                                
                                    <option value='COLLECT_STATUS'>收藏状态</option>
                                
                                    <option value='PLUGIN_ENABLE'>插件状态</option>
                                
                                    <option value='SERVER_TYPE'>机房类型</option>
                                
                                    <option value='COMPARE_PAST_TIME'>同比时间</option>
                                
                                    <option value='PERIOD_EXPRESSION'>同比变化趋势类型</option>
                                
                                    <option value='SEQUENT_EXPRESSION'>环比变化趋势类型</option>
                                
                                    <option value='FLOW_LOGICAL_OPERATOR'>流量同比环比逻辑运算符</option>
                                
                                    <option value='INTERVAL'>时间间隔</option>
                                
                                    <option value='MODULE_STATUS'>组件状态</option>
                                
                                    <option value='ALARM_RULE_TYPE'>规则类型</option>
                                
                            </select>
                        </div>
                    </div>
                    <div class="form-group radioBox">
                        <label class="col-lg-3 control-label">
                            <input type="radio" name="myoption" class="ace" value="0" />
                            <span class="lbl">新增新的字典列表</span>
                        </label>
                        <label class="col-lg-2 control-label" for="dictName">字典名称：</label>
                        <div class="col-lg-2">
                            <input type="text" id="dictName" name="dictName" class="form-control" placeholder="大写英文字母" disabled/>
                        </div>
                        <label class="col-lg-2 control-label" for="nameDesc">字典描述：</label>
                        <div class="col-lg-2">
                            <input type="text" id="nameDesc" name="nameDesc" class="form-control" placeholder="中文描述" disabled/>
                        </div>
                    </div>
                    <div class="dictionaryList">
                        <div class="dictionaryItem form-group">
                            <div class="col-lg-2 control-label addBtn">
                                <button type="button" class="btn btn-white btn-sm">
                                    <i class="fa fa-plus"></i>&nbsp;添加
                                </button>
                            </div>
                            <label class="col-lg-1 control-label">字典键</label>
                            <div class="col-lg-2">
                                <input type="text" name="dictKey" class="dictKey form-control" placeholder="大写英文字母" autocomplete="off"/>
                            </div>
                            <label class="col-lg-1 control-label">字典值</label>
                            <div class="col-lg-2">
                                <input type="text" name="dictValue" class="dictValue form-control" placeholder="中文描述" autocomplete="off"/>
                            </div>
                            <label class="col-lg-2 control-label">字典顺序</label>
                            <div class="col-lg-2">
                                <input type="text" name="dictOrder" class="dictOrder form-control" placeholder="数字" autocomplete="off"/>
                            </div>
                        </div>
                    </div>
                </form>
                <div class="dictionaryItem_add" style="display: none;">
                    <div class="dictionaryItem form-group">
                        <div class="col-lg-2 control-label addBtn">
                            <button type="button" class="btn btn-white btn-sm">
                                <i class="fa fa-plus"></i>&nbsp;添加
                            </button>
                        </div>
                        <label class="col-lg-1 control-label">字典键</label>
                        <div class="col-lg-2">
                            <input type="text" name="dictKey" class="dictKey form-control" placeholder="大写英文字母" autocomplete="off"/>
                        </div>
                        <label class="col-lg-1 control-label">字典值</label>
                        <div class="col-lg-2">
                            <input type="text" name="dictValue" class="dictValue form-control" placeholder="中文描述" autocomplete="off"/>
                        </div>
                        <label class="col-lg-2 control-label">字典顺序</label>
                        <div class="col-lg-2">
                            <input type="text" name="dictOrder" class="dictOrder form-control" placeholder="数字" autocomplete="off"/>
                        </div>
                    </div>
                </div>
                <div class="dictionaryItem_delete" style="display: none;">
                    <div class="dictionaryItem form-group">
                        <div class="col-lg-2 control-label deleteBtn">
                            <button type="button" class="btn btn-white btn-sm">
                                <i class="fa fa-minus"></i>&nbsp;删除
                            </button>
                        </div>
                        <label class="col-lg-1 control-label">字典键</label>
                        <div class="col-lg-2">
                            <input type="text" name="dictKey" class="dictKey form-control" placeholder="大写英文字母" autocomplete="off"/>
                        </div>
                        <label class="col-lg-1 control-label">字典值</label>
                        <div class="col-lg-2">
                            <input type="text" name="dictValue" class="dictValue form-control" placeholder="中文描述" autocomplete="off"/>
                        </div>
                        <label class="col-lg-2 control-label">字典顺序</label>
                        <div class="col-lg-2">
                            <input type="text" name="dictOrder" class="dictOrder form-control" placeholder="数字" autocomplete="off"/>
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary btn-sm" id="addFormSubmitButton">
                    <i class="fa fa-check"></i>&nbsp;提交
                </button>
                <button type="button" class="btn btn-success btn-sm" id="closeButton" data-dismiss="modal">
                    <i class="fa fa-remove"></i>&nbsp;关闭
                </button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="formModal" tabindex="-1" role="dialog" data-backdrop="false" aria-labelledby="myModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
                <h4 class="modal-title" id="myModalLabel">字典管理信息</h4>
            </div>
            <div class="modal-body" id="formModalBody">
                <form id="modalForm" class="form-horizontal" role="form">
                    <div class="form-group" style="display: none;">
                        <label class="col-lg-5 control-label" for="id">主键id：</label>
                        <div class="col-lg-4">
                            <input type="text" id="id" name="id" class="form-control"/>
                        </div>
                    </div>
                    <div class="form-group">
                        <label class="col-lg-5 control-label" for="dictName">字典名称：</label>
                        <div class="col-lg-4">
                            <input type="text" id="dictName" name="dictName" class="form-control"/>
                        </div>
                    </div>
                    <div class="form-group">
                        <label class="col-lg-5 control-label" for="nameDesc">字典名描述：</label>
                        <div class="col-lg-4">
                            <input type="text" id="nameDesc" name="nameDesc" class="form-control"/>
                        </div>
                    </div>
                    <div class="form-group">
                        <label class="col-lg-5 control-label" for="dictKey">字典键：</label>
                        <div class="col-lg-4">
                            <input type="text" id="dictKey" name="dictKey" class="form-control"/>
                        </div>
                    </div>
                    <div class="form-group">
                        <label class="col-lg-5 control-label" for="dictValue">字典值：</label>
                        <div class="col-lg-4">
                            <input type="text" id="dictValue" name="dictValue" class="form-control"/>
                        </div>
                    </div>
                    <div class="form-group">
                        <label class="col-lg-5 control-label" for="dictOrder">字典顺序：</label>
                        <div class="col-lg-4">
                            <input type="text" id="dictOrder" name="dictOrder" class="form-control"/>
                        </div>
                    </div>
                    <div class="form-group">
                        <label class="col-lg-5 control-label" for="updatedAt">更新时间：</label>
                        <div class="col-lg-4">
                            <input type="text" id="updatedAt" name="updatedAt" class="form-control"/>
                        </div>
                    </div>
                    <div class="form-group">
                        <label class="col-lg-5 control-label" for="updatedBy">更新人：</label>
                        <div class="col-lg-4">
                            <input type="text" id="updatedBy" name="updatedBy" class="form-control"/>
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary btn-sm" id="submitButton">
                    <i class="fa fa-check"></i>&nbsp;提交
                </button>
                <button type="button" class="btn btn-primary btn-sm" id="updateButton" >
                    <i class="fa fa-pencil-square-o"></i>&nbsp;编辑
                </button>
                <button type="button" class="btn btn-success btn-sm" id="closeButton" data-dismiss="modal">
                    <i class="fa fa-remove"></i>&nbsp;关闭
                </button>
            </div>
        </div>
    </div>
</div>
<link rel="stylesheet" href="/css/common/common-css.css" />
<div class="dictionaryBox">
    <div class="page-header">
        <h3 class="header smaller lighter blue"><i class="fa fa-arrow-circle-right"></i>&nbsp;查询条件</h3>
        <form id="monitorQueryForm" class="form-horizontal" role="form">
            <div class="form-group">
                <label class="col-sm-1 col-xs-2 control-label" for="dictName">字典描述</label>
                <div class="col-sm-3">
                    <select class="form-control select2" id="dictName" name="dictName">
                        <option value="">请选择</option>
                        
                            <option value='USER_STATUS'>用户状态</option>
                        
                            <option value='RESOURCE_TYPE'>资源类型</option>
                        
                            <option value='DEPARTMENT_STATUS'>部门状态</option>
                        
                            <option value='PERSON_STATUS'>人员状态</option>
                        
                            <option value='GROUP_TYPE'>群组类型</option>
                        
                            <option value='GROUP_STATUS'>群组状态</option>
                        
                            <option value='PHONE_SWITCH'>电话开关</option>
                        
                            <option value='SMS_SWITCH'>短信开关</option>
                        
                            <option value='EMAIL_SWITCH'>邮箱开关</option>
                        
                            <option value='APP_STATUS'>应用状态</option>
                        
                            <option value='NODE_STATUS'>节点状态</option>
                        
                            <option value='CHANNEL_TYPE'>渠道类型</option>
                        
                            <option value='ALARM_LEVEL'>告警等级</option>
                        
                            <option value='MONITOR_TYPE'>监视器类型</option>
                        
                            <option value='TIMER_STATUS'>定时状态</option>
                        
                            <option value='MONITOR_STATUS'>监视器状态</option>
                        
                            <option value='ALARM_SWITCH'>告警开关</option>
                        
                            <option value='ALARM_DEAL_STATUS'>告警处理状态</option>
                        
                            <option value='SEND_STATUS'>发送状态</option>
                        
                            <option value='MONITOR_DATATYPE'>监控数据类型</option>
                        
                            <option value='THRESHOLD_OPERATION'>告警阈值操作符</option>
                        
                            <option value='chenjunyitest'>测试</option>
                        
                            <option value='ENDPOINT_TYPE'>埋点方式</option>
                        
                            <option value='ALARM_SOURCE'>告警来源</option>
                        
                            <option value='DRIVER_TYPE'>驱动类型</option>
                        
                            <option value='ALARM_ZABBIX_TRIGGER_STATUS'>告警触发器状态</option>
                        
                            <option value='LOG_MONITOR_STATUS'>接口监视器状态</option>
                        
                            <option value='LOG_ALARM_SWITCH'>接口告警开关</option>
                        
                            <option value='NODE_CENTER'>机房</option>
                        
                            <option value='LOG_IFS_MONITOR_TYPE'>日志接口监视器类型</option>
                        
                            <option value='AGGREGATE_COUNTER'>秒级统计类型</option>
                        
                            <option value='AGGREGATE_GAUGE'>秒级统计类型</option>
                        
                            <option value='AGGREGATE_METER'>秒级统计类型</option>
                        
                            <option value='AGGREGATE_HISTOGRAM'>秒级统计类型</option>
                        
                            <option value='AGGREGATE_TIMER'>秒级统计类型</option>
                        
                            <option value='INTERFACE_PROTOCOL'>接口协议</option>
                        
                            <option value='INTERFACE_STATUS'>接口状态</option>
                        
                            <option value='DASHBOARD_STATUS'>可配置大屏状态</option>
                        
                            <option value='STAT_TIME_RANGE'>大屏统计范围</option>
                        
                            <option value='Y_AXIS_START_VALUE'>纵坐标起始值</option>
                        
                            <option value='DATA_PROVIDER'>数据来源</option>
                        
                            <option value='CALLBACK_TYPE'>回调类型</option>
                        
                            <option value='COMPARIAN_SYMBOL'>比较符</option>
                        
                            <option value='LOGIC_SYMBOL'>逻辑符</option>
                        
                            <option value='TEST'>符号测试</option>
                        
                            <option value='ALARM_NOTIFY_STASTUS'>告警是否有效</option>
                        
                            <option value='CONVERGENCE_TIME'>告警收敛时间</option>
                        
                            <option value='AGGREGATE_UNIT'>聚合粒度</option>
                        
                            <option value='COLLECT_STATUS'>收藏状态</option>
                        
                            <option value='PLUGIN_ENABLE'>插件状态</option>
                        
                            <option value='SERVER_TYPE'>机房类型</option>
                        
                            <option value='COMPARE_PAST_TIME'>同比时间</option>
                        
                            <option value='PERIOD_EXPRESSION'>同比变化趋势类型</option>
                        
                            <option value='SEQUENT_EXPRESSION'>环比变化趋势类型</option>
                        
                            <option value='FLOW_LOGICAL_OPERATOR'>流量同比环比逻辑运算符</option>
                        
                            <option value='INTERVAL'>时间间隔</option>
                        
                            <option value='MODULE_STATUS'>组件状态</option>
                        
                            <option value='ALARM_RULE_TYPE'>规则类型</option>
                        
                    </select>
                </div>
                <label class="col-sm-1 col-xs-2 control-label" for="dictKey">字典值</label>
                <div class="col-sm-3">
                    <select class="form-control select2" id="dictKey" name="dictKey">
                    </select>
                </div>
            </div>
            <div class="mg-bottom15">
                <button class="btn btn-primary btn-sm btn-round mg-right10" type="button" id="btn_pageQuery">
                    <i class="fa fa-search"></i>&nbsp;查询
                </button>
                <button class="btn btn-white btn-round mg-right10" type="button" id="btn_resetQuery">
                    <i class="fa fa-refresh"></i>&nbsp;重置
                </button>
                    <button class="btn btn-success btn-sm btn-round" type="button" id="btn_add">
                        <i class="fa fa-user-plus"></i>&nbsp;添加
                    </button>
            </div>
        </form>
    </div>
    <div class="row" style="margin-top:5px;">
        <div class="col-xs-12 transparent ui-sortable-handle" style="opacity: 1; z-index: 0;">
            <h3 class="header smaller lighter blue"><i class="fa fa-arrow-circle-right"></i>&nbsp;数据列表</h3>
            <div>
                    <button class="btn btn-warning btn-round deleteCommand" type="button" id="delete"><i class="fa fa-trash-o"></i>&nbsp;删除</button>
            </div>
            <table id="queryTable"></table>
        </div>
    </div>
</div>

<script>
    $(function(){
        $.fn.modal.Constructor.prototype.enforceFocus = function() {}; // select2搜索时获取焦点

        var requestParam; // 全局查询的参数
        var operate = {
            /* 全局变量 */
            url: {
                selectLinkUrl: '/CommonManage/findDictKeyAndValueByDictName.html',
                tableListUrl: '/DictionaryManage/findPage.html',
                addUrl: '/DictionaryManage/add.html',
                modifyUrl: '/DictionaryManage/modify.html',
                removeUrl: '/DictionaryManage/remove.html'
            },
            dictKeyValue: [], // 字典键值
            rowData: {}, // 表格中每行的对象数据
            /* 表格初始化 */
            tableInit: {
                init: function(){
                    var this_ = this;
                    $('#queryTable').bootstrapTable({
                        url: operate.url.tableListUrl,         //请求后台的URL（*）
                        method: 'post',                      //请求方式（*）
                        toolbar: '#toolbar',                //工具按钮用哪个容器
                        striped: false,                      //是否显示行间隔色
                        cache: false,                       //是否使用缓存，默认为true，所以一般情况下需要设置一下这个属性（*）
                        pagination: true,                   //是否显示分页（*）
                        sortable: false,                     //是否启用排序
                        sortOrder: "asc",                   //排序方式
                        queryParams: operate.tableInit.queryParams,//传递参数（*）
                        sidePagination: "server",           //分页方式：client客户端分页，server服务端分页（*）
                        pageNumber:1,                       //初始化加载第一页，默认第一页
                        pageSize: 10,                       //每页的记录行数（*）
                        pageList: [10, 25, 50, 100],        //可供选择的每页的行数（*）
                        search: false,                       //是否显示表格搜索，此搜索是客户端搜索，不会进服务端，所以，个人感觉意义不大
                        strictSearch: true,
                        showColumns: false,                  //是否显示所有的列
                        showRefresh: false,                  //是否显示刷新按钮
                        minimumCountColumns: 2,             //最少允许的列数
                        clickToSelect: false,                //是否启用点击选中行
                        uniqueId: "ID",                     //每一行的唯一标识，一般为主键列
                        showToggle:false,                    //是否显示详细视图和列表视图的切换按钮
                        cardView: false,                    //是否显示详细视图
                        detailView: false,                   //是否显示父子表
                        escape:true,
                        columns: [
                            {checkbox: true, valign: 'middle',width:3,align: 'center', valign: 'middle'},
                            {field: 'dictName', title: '字典名称', align: 'center', valign: 'middle',width:15},
                            {field: 'nameDesc', title: '字典描述', align: 'center', valign: 'middle',width:17},
                            {field: 'dictKey', title: '字典键', align: 'center', valign: 'middle',width:10},
                            {field: 'dictValue', title: '字典值', align: 'center', valign: 'middle',width:10},
                            {field: 'dictOrder', title: '字典顺序', align: 'center', valign: 'middle',width:10},
                            {field: 'updatedAt', title: '更新日期', align: 'center', valign: 'middle',width:15},
                            {field: 'updatedBy', title: '更新人', align: 'center', valign: 'middle',width:10},
                            {field: 'action', title: '操作',align: 'center', valign: 'middle', formatter: operate.tableInit.actionFormatter, events: operate.tableInit.actionEvent,width:10}
                        ]
                    })
                },
                queryParams: function(params){
                    if (requestParam === undefined || requestParam === null) { //TODO 初始化页面时，保存默认的查询参数
                        requestParam = $("#monitorQueryForm").serializeJSON();
                    }
                    return {limit: params.limit, offset: params.offset, data: requestParam};
                },
                actionFormatter: function(value, row, index){
                    var html = ['<a class="btn btn-primary btn-xs" id="detail"><i class="fa fa-eye"></i>&nbsp;详情/编辑</a>'
                        ].join('');
                     var allHtml = '<div class="btn-group">'+ html +'</div>';

                    return allHtml;
                },
                actionEvent: {
                    'click #detail': function (e, value, row, index) {
                        //重置模态框表单数据
                        $('#modalForm')[0].reset();
                        operate.validateForm().resetForm();

                        //模态框表单元素赋值及不可用
                        $("#modalForm").find("input").each(function (i,o) {
                            var name = this.name;
                            if(name !== ""){
                                $("#modalForm #"+name).val(row["" + name]);
                                $("#modalForm #"+name).attr("disabled", true);
                            }
                        });

                        //模态框按钮展示
                        $("#submitButton").hide();
                        $("#updateButton").show();
                        $("#closeButton").show();
                        //打开模态框
                        $('#formModal').modal('show');
                    }
                }
            },
            /* 初始化 */
            operateInit: function(){
                this.pageSelectRequest();
                this.pageSelectInit();
                this.operateAdd();
                this.operatePageQuery();
                this.operateResetQuery();
                this.operateModify();
                this.operateModifySubmit();
                this.operateDeleteCommand();
            },
            /* 页面下拉联动请求 */
            pageSelectRequest: function(){
                $("#monitorQueryForm #dictName").on("change", function () {
                    var dictName = $(this).val().trim();
                    // 字典键值与字典列表联动
                    operate.pageSelectRequestData(dictName);
                });
            },
            pageSelectRequestData: function(dictName){
                // f(url, data, type, contentType, dataType, success, error, complete)
                if(dictName){
                    $("#monitorQueryForm select[name='dictKey']").empty();
                    ajax.req(operate.url.selectLinkUrl, dictName, "POST", "application/json;charset=UTF-8", "json", function (res) {
                        if (res.success) {
                            var dictKeyValue = $.map(res.result, function (o, i) {
                                return {id: o.key, text: o.value}
                            });
                            operate.dictKeyValue = dictKeyValue;
                            // 联动
                            var html = "";
                            $.each(dictKeyValue, function(i,o){
                                html += '<option value="'+o.id+'">'+o.text+'</option>'
                            })
                            $("#monitorQueryForm select[name='dictKey']").append(html);
                            $("#monitorQueryForm select[name='dictKey']").val(null).trigger("change");
                            // console.log("dictKeyValue:", operate.dictKeyValue);
                        } else {
                            layer.msg("字典键值的联动接口请求失败！" + res.errorMsg, {icon: 5});
                        }
                    }, function () {
                        layer.msg("系统异常，稍后再试！", {icon: 5});
                    });
                }
            },
            /* 页面下拉框数据初始化 */
            pageSelectInit: function(){
                // 字典列表
                $("#monitorQueryForm select[name='dictName']").select2({
                    placeholder: "请选择",
                    width: "100%" //设置下拉框的宽度
                });
                // 字典键值
                $("#monitorQueryForm select[name='dictKey']").select2({
                    placeholder: "请选择",
                    width: "100%"
                });
                // 添加弹出框中的select2
                $("#addModalForm .select2").select2({
                    placeholder: "请选择",
                    width: "100%"
                });
                $("#monitorQueryForm .select2").val(null).trigger("change");
            },
            /* 添加按钮点击事件 */
            operateAdd: function(){
                $('#btn_add').on('click',function(){

                    var addHtml = $(".dictionaryItem_add").html();
                    var deleteHtml = $(".dictionaryItem_delete").html();

                    // 点击按钮进去，初始：新增至已有的字典列表
                    $("#addModalForm input[type='radio']").eq(0).prop("checked",true);
                    $("#addModalForm input[type='radio']").eq(1).prop("checked",false);
                    $("#addModalForm input[type='radio']").eq(0).parents(".radioBox").find("select").removeAttr("disabled");
                    $("#addModalForm input[type='radio']").eq(1).parents(".radioBox").find("input[name='dictName'],input[name='nameDesc']").attr("disabled",true).val("").trigger("change");

                    var dictName = $("#monitorQueryForm #dictName").val().trim();
                    $("#addModalForm .select2").val(dictName).trigger("change");

                    $("#addModalForm .dictionaryList").empty();
                    $("#addModalForm .dictionaryList").append(addHtml);

                    $("#addFormModal").modal('show');
                })
            },
            /* 获取字典键/值/顺序 */
            getDictKeyValue: function(dictName,dictKeyValue){
                if(!dictKeyValue){
                    ajax.req(operate.url.selectLinkUrl, dictName,"POST","application/json;charset=UTF-8","json",function(res){
                        if(res.success){
                            var dictKeyValue = $.map(res.result,function(o,i){
                                return {id: o.key,text: o.value}
                            });
                            operate.dictKeyValue = dictKeyValue;
                        }else{
                            layer.msg("字典键值的联动接口请求失败！" + res.errorMsg, {icon : 5});
                        }
                    },function(){
                        layer.msg("系统异常，稍后再试！", {icon : 5});
                    });
                }
            },
            /* 查询按钮点击事件 */
            operatePageQuery: function(){
                $('#btn_pageQuery').on('click',function(){
                    operate.pageQuery();
                })
            },
            /* 重置按钮点击事件 */
            operateResetQuery: function(){
                $('#btn_resetQuery').on('click',function(){
                    operate.resetQuery();
                })
            },
            /* 删除按钮点击事件 */
            operateDeleteCommand: function(){
                $(document).on("click",".deleteCommand",function(){
                    // 获取所有行数据
                    var dataOptions = $("#queryTable").bootstrapTable('getData');
                    // 获取选中行数据
                    var selectOptions = $("#queryTable").bootstrapTable('getSelections');
                    if(selectOptions.length === 0){
                        layer.alert("您还没有选择要操作的记录，请先选择！");
                        return false;
                    }
                    var title = "您确定要删除所选择的记录吗？";
                    var ids = $.map(selectOptions,function(o,i){ return o.id });
                    ids =ids.map(Encrypt)
                    layer.confirm(title, function (index) {
                        ajax.req(operate.url.removeUrl, JSON.stringify(ids), "POST", "application/json;charset=UTF-8", "json", function (res) {
                            if (res.success) {
                                layer.msg("操作成功! 成功笔数为 " + res.result + " 笔", {icon: 6});
                                var dictName = $("#monitorQueryForm #dictName").val().trim();

                                if(dictName){
                                    // console.log("requestParam:",requestParam);

                                    if(dataOptions.length === selectOptions.length){
                                        refreshCurrentPage();
                                    }else{
                                        if(dictName === requestParam.dictName){
                                            operate.pageQuery();
                                        }else{
                                            refreshCurrentPage();
                                        }
                                    }
                                }else{
                                    refreshCurrentPage();
                                }
                            } else {
                                layer.msg(res.errorMsg, {icon: 5});
                            }
                        }, function () {
                            layer.msg("系统异常，稍后再试！", {icon: 5});
                        });
                    })
                })
            },
            pageQuery: function(){
                requestParam = $("#monitorQueryForm").serializeJSON(); //TODO 每次点击查询按钮时，都会刷新全局分页查询参数
                var data = {
                    silent: true, //静默刷新
                    query:{
                        // limit: 10,
                        // offset: 0,
                        data: requestParam
                    }
                };
                $("#queryTable").bootstrapTable('refresh',data);
            },
            resetQuery: function(){
                $('#monitorQueryForm')[0].reset();
                $("#monitorQueryForm .select2").val(null).trigger("change");
                $("#monitorQueryForm select[name='dictKey']").empty();
            },
            /* 校验函数 */
            validateForm: function(){
                return $("#modalForm").validate({
                    rules:{
                        dictKey: {required: true, maxlength: 64, isSpace: true},
                        dictValue: {required: true, maxlength: 64, isSpace: true},
                        dictOrder: {required: true, digits: true, isSpace: true}
                    },
                    messages:{
                        dictKey: {required: "请填入字典键", maxlength: "最大长度为64"},
                        dictValue: {required: "请填入字典值", maxlength: "最大长度为64"},
                        dictOrder: {required: "请填入字典顺序", digits: "请输入整数"
                        }
                    }
                });
            },
            /* 编辑按钮点击事件 */
            operateModify: function(){
                $("#updateButton").on('click',function() {

                    // 由于serializeJSON不识别disabled以及checked的元素，所以要想传id，必须给移除disabled
                    $("#modalForm #id").removeAttr("disabled");
                    $("#modalForm #dictKey").removeAttr("disabled");
                    $("#modalForm #dictValue").removeAttr("disabled");
                    $("#modalForm #dictOrder").removeAttr("disabled");

                    $("#submitButton").show();
                    $("#updateButton").hide();
                    $("#closeButton").show();
                })
            },
            /* 修改编辑后提交按钮点击事件 */
            operateModifySubmit: function(){
                $("#submitButton").on('click',function() {
                    if(operate.validateForm().form()){
                        // 说明通过校验
                        var param = $("#modalForm").serializeJSON();
                        param.dictName = $("#modalForm #dictName").val().trim();
                        param.nameDesc = $("#modalForm #nameDesc").val().trim();
                        ajax.req(operate.url.modifyUrl, JSON.stringify(param), "POST", "application/json;charset=UTF-8", "json", function (res) {
                            if (res.success) {
                                layer.msg("保存成功！", {icon: 6});
                                $("#formModal").modal("hide");
                                var dictName = $("#monitorQueryForm #dictName").val().trim();
                                // refreshCurrentPage();
                                operate.pageSelectRequestData(dictName);
                                operate.pageQuery();
                            } else {
                                layer.msg("保存失败！" + res.errorMsg, {icon: 5});
                            }
                        }, function () {
                            layer.msg("系统异常，稍后再试！", {icon: 5});
                        });
                    }else{
                        // 校验不通过，什么都不用做
                    }
                })
            }
        }
        var addFormOperate = {
            formOperateInit: function(){
                this.radioWatch();
                this.addDictKey();
                this.deleteDictKey();
                this.addFormSubmitFun();
            },
            /* 单选监听 */
            radioWatch: function(){
                $("input[type='radio']").on("change", function(){
                    // console.log("监听改变：",$(this));
                    if($(this).prop("checked")){
                        $(this).parents(".radioBox").find("select,input").removeAttr("disabled");
                        $(this).parents(".radioBox").siblings(".radioBox").find("select,input[name='dictName'],input[name='nameDesc']").attr("disabled",true).val("").trigger("change");
                    }
                });
                $("select[name='dictList']").on("change", function(){
                    var value = $(this).val().trim();
                    if(value){
                        operate.getDictKeyValue(value);
                    }else{
                        operate.dictKeyValue = [];
                    }
                })
            },
            /* 点击添加字典键 */
            addDictKey: function(){
                var addHtml = '';
                $('.dictionaryList').delegate('.addBtn', 'click', function() {
                    addHtml = $('.dictionaryItem_delete').html();
                    $('.dictionaryList').append(addHtml);
                })
            },
            /* 点击删除字典键 */
            deleteDictKey: function(){
                $('.dictionaryList').delegate('.deleteBtn', 'click', function(){
                    $(this).parents('.dictionaryItem').remove();
                })
            },
            /* 点击提交按钮 */
            addFormSubmitFun: function(){
                $("#addFormSubmitButton").on('click',function() {
                    // 校验字典名称
                    var dictName = $("#addModalForm input[name='dictName']").val().trim();
                    var nameDesc = $("#addModalForm input[name='dictName']").text().trim();
                    var dictNameList = [];
                    var paramList = []; // 传到后台的参数
                    $.each($("select.select2 option"), function(i,o){
                        if($(this).val()){
                            dictNameList.push({id: $(this).val(), text: $(this).text()})
                        }
                    });
                    if(!$("#addModalForm input[name='dictName']").attr("disabled")){
                        var val = $("#addModalForm input[name='dictName']").val().trim().toUpperCase() || "";
                        var desc = $("#addModalForm input[name='nameDesc']").val().trim();
                        var keys = $.map(dictNameList, function(o,i){return o.id});
                        dictName = val;
                        nameDesc = desc;
                        if(addFormOperate.repeatItemFun(val, keys)){
                            layer.msg("字典名称已存在，请重新填入！", {icon: 5});
                            return false;
                        }
                    }else{
                        dictName = $("#addModalForm select[name='dictList']").val();
                        nameDesc = $("#addModalForm select[name='dictList']").select2('data')[0].text || $("#addModalForm select[name='dictList']").select2('data').text;
                    }
                    // 校验字典键 和 字典值
                    var nList = [], vList = [];
                    var isExist = false, isExistV = false;
                    $.each($(".dictionaryList .dictKey"), function(i,o){
                        var item = $(this).val().trim().toUpperCase(); // 转换成大写
                        var keys = $.map(operate.dictKeyValue || [], function(obj,int){return obj.id});
                        nList.push(item);
                        if(addFormOperate.repeatItemFun(item, keys)){
                            isExist = true;
                            return false;
                        }
                    });
                    $.each($(".dictionaryList .dictValue"), function(i,o){
                        var item = $(this).val().trim();
                        var values = $.map(operate.dictKeyValue || [], function(obj,int){return obj.text});
                        vList.push(item);
                        if(addFormOperate.repeatItemFun(item, values)){
                            isExistV = true;
                            return false;
                        }
                    });
                    if(isExist){
                        layer.msg("字典键已存在，请重新填入！", {icon: 5});
                        return false;
                    }
                    if(isExistV){
                        layer.msg("字典值已存在，请重新填入！", {icon: 5});
                        return false;
                    }
                    if(addFormOperate.isRepeatArray(nList)){
                        layer.msg("字典键含有重复值，请重新填入！", {icon: 5});
                        return false;
                    }
                    if(addFormOperate.isRepeatArray(vList)){
                        layer.msg("字典值含有重复值，请重新填入！", {icon: 5});
                        return false;
                    }
                    // 封装
                    var isRequest = true;
                    $.each($(".dictionaryList .dictionaryItem"), function(i,o){
                        var param = {
                            dictName: dictName || "",
                            nameDesc: nameDesc || "",
                            dictKey: $(o).find("input.dictKey").val().trim().toUpperCase() || "",
                            dictValue: $(o).find("input.dictValue").val().trim() || "",
                            dictOrder: $(o).find("input.dictOrder").val().trim() || ""
                        }
                        // console.log("params",param);
                        $.each(param, function(int,obj){
                            if(param[int] === undefined || param[int] === "" || param[int] === null){
                                layer.msg("页面含有空值，请检查后再提交！", {icon: 5});
                                isRequest = false;
                            }
                            if(int === "dictOrder" && param[int] !== "0" && isNaN(Number(param[int]))){
                                layer.msg("字典顺序必须为数字，请检查后再提交！", {icon: 5});
                                isRequest = false;
                            }
                        });
                        param.dictOrder = Number(param.dictOrder);
                        paramList.push(param);
                    })
                    // console.log("paramList",paramList);
                    if(isRequest){
                        ajax.req(operate.url.addUrl,JSON.stringify(paramList),"POST","application/json;charset=UTF-8","json",function(res){
                            if (res.success) {
                                layer.msg("操作成功! 成功笔数为 "+res.result+" 笔", {icon: 6});
                                if($("#addModalForm input[type='radio']").eq(0).prop("checked")){
                                    var dictName = $("#addModalForm #dictList").val().trim();
                                    // console.log("dictName:",dictName);
                                    $("#monitorQueryForm #dictName").val(dictName).trigger("change");
                                    $("#addFormModal").modal("hide");
                                    operate.pageQuery();
                                }else{
                                    refreshCurrentPage();
                                }
                            } else {
                                layer.msg(res.errorMsg, {icon: 5});
                            }
                        }, function () {
                            layer.msg("系统异常，稍后再试！", {icon: 5});
                        });
                    }
                })
            },
            /* 返回重复的值 */
            repeatItemFun: function(item, array){
                if(array.indexOf(item) > -1){
                    return item;
                }else{
                    return false;
                }
            },
            /* 判断数组里是否有重复值 */
            isRepeatArray: function(array){
                var nary = array.sort();
                for(var i = 0; i < array.length; i++){
                    if (nary[i] === nary[i+1]){
                        return nary[i];
                    }
                }
                return false;
            },
            /* 数组去掉重复值 */
            uniq: function (array) {
                var temp = [];
                for (var i = 0; i < array.length; i++) {
                    if (temp.indexOf(array[i]) == -1) {
                        temp.push(array[i]);
                    }
                }
                return temp;
            }
        }
        operate.tableInit.init();
        operate.operateInit();
        addFormOperate.formOperateInit();
        tableOnload()
    });
</script>
"